name: CI/CD Pipeline

on:
  push:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js 24
        uses: actions/setup-node@v3
        with:
          node-version: 14
      - name: Install dependencies
        run: npm install
      - name: Lint GitHub Actions YAML files
        run: npx grunt yamllint
      - name: Run tests
        run: npm test
      - name: Check for vulnerabilities in dependencies
        run: npm audit --audit-level=high
      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/my-app-image .
      - name: Login to Docker Hub
        run: docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
      - name: Test for vulnerability
        run: |
          sudo apt-get install wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install trivy
          trivy image ${{ secrets.DOCKER_USERNAME }}/my-app-image:latest
          
      - name: Push Docker image to Docker Hub
        run: docker push ${{ secrets.DOCKER_USERNAME }}/my-app-image:latest

  deploy:
    runs-on: ubuntu-latest
    needs: [ build ]  # This job depends on the successful completion of the "build" job
    steps:
      - uses: actions/checkout@v3
      - name: Deploy to AWS EC2
        env:
            PRIVATE_KEY: ${{ secrets.EC2_PASSWORD }}
            HOSTNAME: ${{secrets.EC2_HOST}}
            USER_NAME: ${{secrets.EC2_USER}}
      
        run: |
          echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
          ssh -o StrictHostKeyChecking=no -i private_key ${USER_NAME}@${HOSTNAME} '
            sudo yum update -y
            sudo yum install docker -y
            sudo systemctl start docker
            sudo docker stop my-app-container || true
            sudo docker rm my-app-container ||true
            sudo docker pull ${{secrets.DOCKER_USERNAME }}/my-app-image:latest
            sudo docker run -d -h 0.0.0.0 -p 80:80 --name my-app-container ${{ secrets.DOCKER_USERNAME }}/my-app-image:latest
            sudo docker cp temp-container:prometheus.yml /home/ec2-user/prometheus.yml
            wget https://github.com/prometheus/prometheus/releases/download/v2.30.0/prometheus-2.30.0.linux-amd64.tar.gz
            tar xvfz prometheus-2.30.0.linux-amd64.tar.gz
            cd prometheus-2.30.0.linux-amd64
            ./prometheus --config.file=/home/ec2-user/prometheus.yml &
            '
