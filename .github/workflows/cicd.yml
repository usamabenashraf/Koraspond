name: CI/CD Pipeline

on:
  push:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js 24
        uses: actions/setup-node@v3
        with:
          node-version: 14
      - name: Install dependencies
        run: npm install
      - name: Lint GitHub Actions YAML files
        run: npx grunt yamllint
      - name: Run tests
        run: npm test
      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/my-app-image .
      - name: Login to Docker Hub
        run: docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
      - name: Push Docker image to Docker Hub
        run: docker push ${{ secrets.DOCKER_USERNAME }}/my-app-image:latest

  vulnerability-scanning:
    runs-on: ubuntu-latest
    needs: [ build ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Pull Docker image
        run: docker pull ${{ secrets.DOCKER_USERNAME }}/my-app-image:latest

      - name: Run Trivy vulnerability scan
        run: docker run --rm -v $PWD:/root/.cache/ aquasec/trivy ${{ secrets.DOCKER_USERNAME }}/my-app-image:latest --exit-code 0 --severity HIGH,CRITICAL --ignore-unfixed
        
  deploy:
    runs-on: ubuntu-latest
    needs: [ vulnerability-scanning ]  # This job depends on the successful completion of the "build" job
    steps:
      - uses: actions/checkout@v3
      - name: Deploy to AWS EC2
        env:
            PRIVATE_KEY: ${{ secrets.EC2_PASSWORD }}
            HOSTNAME: ${{secrets.EC2_HOST}}
            USER_NAME: ${{secrets.EC2_USER}}
      
        run: |
          echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
          ssh -o StrictHostKeyChecking=no -i private_key ${USER_NAME}@${HOSTNAME} '
            sudo yum update -y
            sudo yum install docker -y
            sudo systemctl start docker
            sudo docker stop my-app-container || true
            sudo docker rm my-app-container ||true
            sudo docker pull ${{secrets.DOCKER_USERNAME }}/my-app-image:latest
            sudo docker run -d -h 0.0.0.0 -p 80:80 --name my-app-container ${{ secrets.DOCKER_USERNAME }}/my-app-image:latest
            '
          curl -LO "https://github.com/prometheus/prometheus/releases/download/v2.30.0/prometheus-2.30.0.linux-amd64.tar.gz"
          tar -xvf prometheus-2.30.0.linux-amd64.tar.gz
          prometheus --config.file=/path/to/prometheus.yml &
